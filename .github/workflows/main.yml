name: CI

on:
  push:
    branches: ["main", "develop"]
    tags: ["v**"]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci --ignore-scripts
      - run: npm run lint
      - run: npm run test
      - run: npm run build
      - uses: actions/cache/save@v4
        with:
          path: ./dist/
          key: ${{ runner.os }}-${{ runner.arch }}-${{ github.sha }}

  publish-develop:
    if: github.ref_name == 'develop'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - uses: actions/cache/restore@v4
        with:
          path: ./dist/
          key: ${{ runner.os }}-${{ runner.arch }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-${{ runner.arch }}-
          fail-on-cache-miss: true

      - uses: koumatsumoto/get-npm-package-info-action@v1
        id: package_info

      - name: Publish package
        shell: bash
        run: npm version --no-commit-hooks --no-git-tag-version --allow-same-version $VERSION && npm publish --ignore-scripts
        env:
          VERSION: ${{ steps.package_info.outputs.package_version }}-dev-${{ steps.package_info.outputs.git_commit_hash_short }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Job Summary
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const heading = 'New NPM Packages'
            const output = `
              *New Version* ðŸ¤– *${{ inputs.version }}*\n
              Run command below to install newly published package.\n
              \`npm install ${{ steps.package_info.outputs.package_name }}@${{ steps.package_info.outputs.git_commit_hash_short }}\`\n
            `;
            await core.summary
              .addHeading(heading)
              .addRaw(output)
              .write()

  publish-production:
    if: contains(github.ref, 'tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - uses: actions/cache/restore@v4
        with:
          path: ./dist/
          key: ${{ runner.os }}-${{ runner.arch }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-${{ runner.arch }}-
          fail-on-cache-miss: true

      - name: Trim v of version string
        run: |
          TAG=${{ github.ref_name }}
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT
        id: get_version_string

      - name: Publish package
        shell: bash
        run: npm version --no-commit-hooks --no-git-tag-version --allow-same-version $VERSION && npm publish --ignore-scripts
        env:
          VERSION: ${{ steps.get_version_string.outputs.version }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
